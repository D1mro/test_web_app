const { Telegraf } = require('telegraf');
const express = require('express');

const BOT_TOKEN = '7980015624:AAEdP30COOVbhlgP_hcX6mnoUfPUSErNTjg';
const WEBAPP_URL = 'https://swap-shoes-bot.vercel.app';
const PORT = process.env.PORT || 3000;

const bot = new Telegraf(BOT_TOKEN);
const app = express();

// Middleware –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON
app.use(express.json());

// 1. –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
bot.command('start', (ctx) => {
  try {
    ctx.reply('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ SWAP SHOES! üëü', {
      reply_markup: {
        inline_keyboard: [
          [{
            text: 'üõçÔ∏è –û—Ç–∫—Ä—ã—Ç—å –º–∞–≥–∞–∑–∏–Ω',
            web_app: { url: WEBAPP_URL }
          }]
        ]
      }
    });
  } catch (e) {
    console.error('–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ /start:', e);
  }
});

// 2. –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–µ–±—Ö—É–∫–∞
app.post('/api/webhook', async (req, res) => {
  try {
    await bot.handleUpdate(req.body, res);
  } catch (e) {
    console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–µ–±—Ö—É–∫–∞:', e);
    res.status(200).send();
  }
});

// 3. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤–µ–±—Ö—É–∫–∞ (–≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –æ–¥–∏–Ω —Ä–∞–∑)
const initWebhook = async () => {
  try {
    const webhookUrl = `${WEBAPP_URL}/api/webhook`;
    await bot.telegram.setWebhook(webhookUrl);
    console.log('Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞:', webhookUrl);
  } catch (e) {
    console.error('–û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–µ–±—Ö—É–∫–∞:', e);
  }
};

// 4. –î–ª—è Vercel - –æ—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
module.exports = app;

// 5. –õ–æ–∫–∞–ª—å–Ω—ã–π –∑–∞–ø—É—Å–∫ (–¥–ª—è —Ç–µ—Å—Ç–æ–≤)
if (process.env.NODE_ENV === 'development') {
  app.listen(PORT, async () => {
    console.log(`–õ–æ–∫–∞–ª—å–Ω—ã–π —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
    await initWebhook();
  });
} else {
  // –î–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –≤–µ–±—Ö—É–∫ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
  initWebhook().catch(console.error);
}
